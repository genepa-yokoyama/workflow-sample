name: "Reusable Notification Workflow"
on:
  workflow_call:
    inputs:
      USER_MAPPING:
        type: string
        required: false
    secrets:
      CHATWORK_TOKEN:
        required: true
      CHATWORK_ROOM_ID:
        required: true

jobs:
  notify-chatwork:
    runs-on: ubuntu-latest
    steps:
      - name: Install jq
        run: sudo apt-get install jq

      - name: Notify Chatwork
        env:
          CHATWORK_TOKEN: ${{ secrets.CHATWORK_TOKEN }}
          CHATWORK_ROOM_ID: ${{ secrets.CHATWORK_ROOM_ID }}
          USER_MAPPING: ${{ inputs.USER_MAPPING }}
          GITHUB_EVENT_NAME: ${{ github.event_name }}
          GITHUB_EVENT_PATH: ${{ github.event_path }}
          IS_MERGED: ${{ github.event.pull_request.merged }}
          PR_USER_LOGIN: ${{ github.event.pull_request.user.login }}
          PR_TITLE: ${{ github.event.pull_request.title }}
          PR_URL: ${{ github.event.pull_request.html_url }}
          COMMENT_USER_LOGIN: ${{ github.event.comment.user.login }}
          COMMENT_URL: ${{ github.event.comment.html_url }}
        run: |
          GITHUB_ACTION=${{ github.event.action }}

          GITHUB_USERS=()
          if [ "$GITHUB_EVENT_NAME" == "pull_request" ]; then
            if [ "$GITHUB_ACTION" == "closed" ]; then
              if [ "$IS_MERGED" == "true" ]; then
                GITHUB_USERS=("$PR_USER_LOGIN")
              fi
            else
              GITHUB_USERS="${{ toJson(github.event.pull_request.requested_reviewers.*.login) }}"
            fi
          fi

          TO_PART=""
          for GITHUB_ID in "${GITHUB_USERS[@]}"
          do
            CHATWORK_ID=$(echo $USER_MAPPING | jq -r ".[\"$GITHUB_ID\"]")
            if [ -n "$CHATWORK_ID" ]; then
              if [ "$CHATWORK_ID" == "toall" ]; then
                TO_PART+="[toall]"
              else
                TO_PART+="[To:${CHATWORK_ID}] $GITHUB_ID"
              fi
            fi
          done

          MESSAGE="[info][title]プルリクエスト通知: $PR_TITLE[/title]プルリクエスト"

          case "$GITHUB_EVENT_NAME" in
          "pull_request")
              case "$GITHUB_ACTION" in
              "opened"|"reopened")
                  MESSAGE+="が作成されました"
                  ;;
              "edited"|"review_requested"|"assigned")
                  MESSAGE+="が更新されました"
                  ;;
              "synchronize")
                  MESSAGE+="に新しいコミットがプッシュされました。"
                  ;;
              "closed")
                  if [ "$IS_MERGED" == "true" ]; then
                      MESSAGE+="がマージされました"
                  else
                      MESSAGE+="が閉じられました"
                  fi
                  ;;
              *)
                  MESSAGE+="が何かされました"
                  MESSAGE+=$(printf "\n$GITHUB_EVENT_NAME -- $GITHUB_ACTION")
              esac
              
              MESSAGE+=$(printf "\n\n$PR_URL")
              MESSAGE+=$(printf "\nFROM: $PR_USER_LOGIN")
              ;;
          "pull_request_review")
              MESSAGE+="に対するレビュー"
              case "$GITHUB_ACTION" in
              "submitted")
                  MESSAGE+="が作成されました"
                  ;;
              *)
                  MESSAGE+="が更新されました"
                  MESSAGE+=$(printf "\n$GITHUB_EVENT_NAME -- $GITHUB_ACTION")
              esac
              
              MESSAGE+=$(printf "\n\n$PR_URL")
              MESSAGE+=$(printf "\nFROM: $PR_USER_LOGIN")
              ;;
          "issue_comment")
              MESSAGE+="[ISSUE]に対するコメント"
              case "$GITHUB_ACTION" in
              "created")
                  MESSAGE+="が作成されました"
                  ;;
              "edited")
                  MESSAGE+="が更新されました"
                  ;;
              *)
                  MESSAGE+="が何かされました"
                  MESSAGE+=$(printf "\n$GITHUB_EVENT_NAME -- $GITHUB_ACTION")
              esac

              MESSAGE+=$(printf "\n\n$COMMENT_URL")
              MESSAGE+=$(printf "\nFROM: $COMMENT_USER_LOGIN")
              ;;
          *)
              MESSAGE+="[/info][info][title]DEBUG: github.event[/title]"
              MESSAGE+="${{ toJson(github.event) }}"
          esac

          MESSAGE+="[hr]DEBUG -- $GITHUB_EVENT_NAME : $GITHUB_ACTION"
          MESSAGE+="[/info]"

          MESSAGE+="[info][title]DEBUG[/title]"
          MESSAGE+=$(printf "USER_MAPPING: $USER_MAPPING\n
            GITHUB_ACTION: $GITHUB_ACTION\n
            GITHUB_EVENT_NAME: $GITHUB_EVENT_NAME\n
            GITHUB_EVENT_PATH: $GITHUB_EVENT_PATH\n
            IS_MERGED: $IS_MERGED\n
            PR_USER_LOGIN: $PR_USER_LOGIN\n 
            PR_TITLE: $PR_TITLE\n
            PR_URL: $PR_URL\n
            COMMENT_USER_LOGIN: $COMMENT_USER_LOGIN\n
            COMMENT_URL: $COMMENT_URL\n
          [/info]")

          curl --request POST \
              --url https://api.chatwork.com/v2/rooms/${CHATWORK_ROOM_ID}/messages \
              --header "accept: application/json" \
              --header "content-type: application/x-www-form-urlencoded" \
              --header "x-chatworktoken: ${CHATWORK_TOKEN}" \
              --data-urlencode "body=${TO_PART}${MESSAGE}" \
              --data self_unread=1
