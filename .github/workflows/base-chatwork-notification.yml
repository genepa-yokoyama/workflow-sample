name: "Reusable Notification Workflow"
on:
  workflow_call:
    inputs:
      USER_MAPPING:
        type: string
        required: false
    secrets:
      CHATWORK_TOKEN:
        required: true
      CHATWORK_ROOM_ID:
        required: true

jobs:
  notify-chatwork:
    runs-on: ubuntu-latest
    steps:
      - name: Install jq
        run: sudo apt-get install jq

      - name: Notify Chatwork
        env:
          CHATWORK_TOKEN: ${{ secrets.CHATWORK_TOKEN }}
          CHATWORK_ROOM_ID: ${{ secrets.CHATWORK_ROOM_ID }}
          USER_MAPPING: ${{ inputs.USER_MAPPING }}
        run: |
          case "${{ github.event.action }}" in
              "closed")
                  if [ ${{ github.event.pull_request.merged }} == true ]; then
                      GITHUB_USERS='["${{ github.event.pull_request.user.login }}"]'
                  else
                      GITHUB_USERS='[]'
                  fi
                  ;;
              *)
                  GITHUB_USERS='${{ toJson(github.event.pull_request.requested_reviewers.*.login) }}'
          esac

          GITHUB_USER_IDS=$(echo "$GITHUB_USERS" | jq -r '.[]')
          TO_PART=""
          for GITHUB_ID in $GITHUB_USER_IDS
          do
          CHATWORK_ID=$(echo $USER_MAPPING | jq -r ".[\"$GITHUB_ID\"]")

          if [ -n "$CHATWORK_ID" ]; then
              if [ "$CHATWORK_ID" == "toall" ]; then
              TO_PART+="[toall]"
              else
              TO_PART+="[To:${CHATWORK_ID}] $GITHUB_ID"
              fi
          fi
          done

          MESSAGE=$(printf "[info][title]プルリクエスト通知: ${{ github.event.pull_request.title }}[/title]\n")

          # プルリクエスト
          if [ -n "${{ github.event.pull_request }}" ]; then
              MESSAGE+="プルリクエスト"
              # レビュー
              if [ -n "${{ github.event.review }}" ]; then
                  MESSAGE+="に対するレビュー"
                  case "${{ github.event.action }}" in
                  "submitted")
                      MESSAGE+="が作成されました"
                      ;;
                  *)
                      MESSAGE+="が更新されました"
                      MESSAGE+="DEBUG[pull_request.review: ${{ github.event.action }}]"
                  esac
              # プルリクエスト
              else
                  case "${{ github.event.action }}" in
                  "opened"|"reopened")
                      MESSAGE+="が作成されました"
                      ;;
                  "edited"|"review_requested"|"assigned")
                      MESSAGE+="が更新されました"
                      ;;
                  "synchronize")
                      MESSAGE+="に新しいコミットがプッシュされました。"
                      ;;
                  "closed")
                      if [ "${{ github.event.pull_request.merged }}" == "true" ]; then
                      MESSAGE+="がマージされました"
                      else
                      MESSAGE+="が閉じられました"
                      fi
                      ;;
                  *)
                      MESSAGE+="DEBUG[pull_request: ${{ github.event.action }}]"
                  esac
              fi
              MESSAGE+=$(printf "\n\n${{ github.event.pull_request.html_url }}")
              MESSAGE+=$(printf "\nFROM: ${{ github.event.pull_request.user.login }}")
          # プルリクエストコメント
          elif [ -n "${{ github.event.comment }}" ] && [ -n "${{ github.event.issue.pull_request }}" ]; then
              MESSAGE+="[ISSUE]プルリクエストに対するコメント"
              case "${{ github.event.action }}" in
              "created")
                  MESSAGE+="が作成されました"
                  ;;
              "edited")
                  MESSAGE+="が更新されました"
                  ;;
              *)
                  MESSAGE+="DEBUG[issue_comment: ${{ github.event.action }}]"
              esac
              BODY=${{ github.event.comment.body }}
              # BODY = ${BODY:0:30}
              MESSAGE+="[hr]${BODY}"
              # if [ ${#BODY} -gt 30 ]; then
              #   MESSAGE+="..."
              # fi
              MESSAGE+=$(printf "\n\n${{ github.event.comment.html_url }}")
              MESSAGE+=$(printf "\nFROM: ${{ github.event.comment.user.login }}")
          else
              MESSAGE+="DEBUG[github.event: ${{ github.event.action }}]"
              MESSAGE+="[/info][info][title]DEBUG: github.event[/title]"
              MESSAGE+="${{ toJson(github.event) }}"
          fi

          MESSAGE+="[/info]"


          curl --request POST \
              --url https://api.chatwork.com/v2/rooms/${CHATWORK_ROOM_ID}/messages \
              --header "accept: application/json" \
              --header "content-type: application/x-www-form-urlencoded" \
              --header "x-chatworktoken: ${CHATWORK_TOKEN}" \
              --data-urlencode "body=${TO_PART}${MESSAGE}" \
              --data self_unread=1
